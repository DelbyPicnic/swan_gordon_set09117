Checkers Game - Quick Notes
Using the name Checkers because I don't have the effor to consistently spell the 
word Draughtghtshchaheb whatever

Checkers Ruls:
- Board is 8-8 spaces, alternating black white black.
- Lower left square for each player is black.
- Three rows of pieces each, twelve in total.
- Pieces only move on the black squares, and thus only move in a diagonal direction.
- Non-Capturing moves are restricted to one diagonal space at a time.
- Non-King pieces must only move in a forward relative direction.
- King pieces may move backwards in addition to forwards.
- A Capture-Move must only capture one opponent piece at a time, however multiple
  CMoves can be made in one turn.
- The destination space for a piece, post move, must not be occupied.
- Captured pieces are removed from the board
- If a CMove can be made then it must be taken by the relative player, if multiple CMoves
  are available then the player may choose the move they make.

Operations:
- Move Validation
  - Can I move here?
- Capture Validation
  - Can any capture moves be made?
- King validation
  - Has my piece reached the relative-top of the board?
- Win Validation
  - Has anyone won/lost the game?

Characteristics of a Move
- Relative Direction
- Number of Spaces
- Destination Location
Conditions of a Move
- Direction must be FORWARD unless piece is king.
- Number of Spaces must be 1,1 unless move is cmove (capture move) case must be 3,3
- Destination Location must be in board range
- Destination Location must not be occupied by another piece
- Destination Location must be a legal destinaton (a black square)
Operations of a Move
- movePiece //Attempts to move the piece in location A to location B

Characteristics of a Piece
- Piece Colour
- Piece Location
- Piece IsKing
- Piece IsCaptured
Conditions of a Piece
- Piece IsCaptured must be false in order to move
- Piece Location must be legal (black)
- Piece Location must be at relative top to be made king
Operations of a Piece
- makeKing() //Attempts to king the piece
- capturePiece() //Removes a piece from play

GAMESTATE
Game state is the underlaying control framework that facilitates the gameplay, haven't decided on a structure for this, prolly just write all
operations and the event loop in the main file.

Gamestate functions:
checkForWinner() //Test the boardstate for a winning side
checkForKing() //Test the boardstate for pieces that should be made king 
getMoves() //Return a set of possible moves for the side in play, order by value.





